buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "io.ratpack:ratpack-gradle:1.3.3"
    classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
      classpath 'com.moowork.gradle:gradle-node-plugin:0.9'
  }
}

ext {
  // The drivers we want to use
  drivers = ["firefox", "chrome", "phantomJs"]

  ext {
    gebVersion = '0.13.1'
    seleniumVersion = '2.52.0'
    chromeDriverVersion = '2.19'
    phantomJsVersion = '1.9.7'
  }
}

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "idea"
apply plugin: "com.moowork.node"

repositories {
  jcenter()
}

dependencies {
  // Default SLF4J binding.  Note that this is a blocking implementation.
  // See here for a non blocking appender http://logging.apache.org/log4j/2.x/manual/async.html
  runtime 'org.slf4j:slf4j-simple:1.7.12'

  // If using Spock, need to depend on geb-spock
  testCompile ("org.gebish:geb-spock:$gebVersion") {
    exclude group:'org.codehaus.groovy'
  }
  testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
    exclude group: "org.codehaus.groovy"
  }

  // If using JUnit, need to depend on geb-junit (3 or 4)
  testCompile ("org.gebish:geb-junit4:$gebVersion")  {
    exclude group: "org.codehaus.groovy"
  }

  // http://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
  compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.52.0'
  compile "org.shamdata:sham:0.3"

  // Drivers
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    // using a custom version of phantomjs driver for now as the original one does not support WebDriver > 2.43.1
  testCompile("com.codeborne:phantomjsdriver:1.2.1") {
    // phantomjs driver pulls in a different selenium version
    transitive = false
  }

  testCompile ('io.ratpack:ratpack-remote-test:1.3.0') {
    exclude group: "org.codehaus.groovy"
  }
  // http://mvnrepository.com/artifact/com.google.inject/guice
  compile group: 'com.google.inject', name: 'guice', version: '3.0'

  compile 'io.ratpack:ratpack-handlebars:1.2.0'
  compile 'com.fasterxml.jackson:jackson-parent:2.7-1'
  compile 'postgresql:postgresql:9.1-901-1.jdbc4'
  compile 'org.codehaus.groovy:groovy-all:2.4.4'

  compile 'org.liquibase:liquibase-core:3.4.2'

  testCompile ratpack.dependency('test')
  compile ratpack.dependency("remote")
  testCompile ratpack.dependency("remote-test")
  compile ratpack.dependency("hikari")

  // https://mvnrepository.com/artifact/com.restfb/restfb
  compile group: 'com.restfb', name: 'restfb', version: '1.26.0'

    //Grab the user location with GeoIP2
    compile 'com.maxmind.geoip2:geoip2:2.8.0-rc1'

}

drivers.each { driver ->
  task "${driver}Test"(type: Test) {
    reports {
      html.destination = reporting.file("$name/tests")
      junitXml.destination = file("$buildDir/test-results/$name")
    }

    outputs.upToDateWhen { false }  // Always run tests

    systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
    systemProperty "geb.env", driver

    // If you wanted to set the baseUrl in your buildâ€¦
    // systemProperty "geb.build.baseUrl", "http://myapp.com"
  }
}

node {
    version = '4.4.5'
    npmVersion = '2.15.5'
    download = true
}

task npmCacheConfig(type: NpmTask) {
    description = "Configure the NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    args = ['config', 'set', 'cache', npmCacheDir]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install Node.js packages"
    args = ['install']
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task bowerInstall(type: NodeTask) {
    script = file('node_modules/.bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('bower_components')
    dependsOn npmPackages
}

task bowerSync(type: Sync) {
    from 'bower_components'
    into "src/ratpack/public/assets/"
    exclude '**/*.min.js'
    dependsOn bowerInstall
}

task bowerPackages() {
    dependsOn bowerSync
}

processResources.dependsOn bowerPackages

clean.delete << file('src/ratpack/public/assets/')
clean.delete << file('node_modules')
clean.delete << file('bower_components')

task stage {
    dependsOn installDist
}
